{
  "address": "0x41Cb5173C5196AEF69e04525a62856bb7Cf527dd",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCuts",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initializationContractAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "InitializationFunctionReverted",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x79a836e96980c77b4597bf6d2369290186cc14e069e4f68f45a58b3fbed9a5ba",
  "receipt": {
    "to": null,
    "from": "0xaa00F46D8FcaF64d370a5da2ee37C90fa5FbBE58",
    "contractAddress": "0x41Cb5173C5196AEF69e04525a62856bb7Cf527dd",
    "transactionIndex": 4,
    "gasUsed": "923312",
    "logsBloom": "0x
    "blockHash": "0x366ca1bdb943014c81e32757ce92d7a5b26483624a2295afd09704ee6b350b49",
    "transactionHash": "0x79a836e96980c77b4597bf6d2369290186cc14e069e4f68f45a58b3fbed9a5ba",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 38417382,
        "transactionHash": "0x79a836e96980c77b4597bf6d2369290186cc14e069e4f68f45a58b3fbed9a5ba",
        "address": "0x41Cb5173C5196AEF69e04525a62856bb7Cf527dd",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000aa00f46d8fcaf64d370a5da2ee37c90fa5fbbe58"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0x366ca1bdb943014c81e32757ce92d7a5b26483624a2295afd09704ee6b350b49"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 38417382,
        "transactionHash": "0x79a836e96980c77b4597bf6d2369290186cc14e069e4f68f45a58b3fbed9a5ba",
        "address": "0x41Cb5173C5196AEF69e04525a62856bb7Cf527dd",
        "topics": [
          "0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000b3194460b5548628e9f58424525e2a823d5c18ac00000000000000000000000000000000000000000000000000000000000003600000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000bd9d2a51b8af382dac420f862d4e1b458cc11df40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000011f931c1c00000000000000000000000000000000000000000000000000000000000000000000000000000000b200799f48771bfd57ea9b5944fdb71568439007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000005cdffacc60000000000000000000000000000000000000000000000000000000052ef6b2c00000000000000000000000000000000000000000000000000000000adfca15e000000000000000000000000000000000000000000000000000000007a0ed6270000000000000000000000000000000000000000000000000000000001ffc9a700000000000000000000000000000000000000000000000000000000000000000000000000000000639b820dc7210cb0e8684f575ac2ae7f6d12c9c90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000028da5cb5b00000000000000000000000000000000000000000000000000000000f2fde38b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004e1c7392a00000000000000000000000000000000000000000000000000000000",
        "logIndex": 21,
        "blockHash": "0x366ca1bdb943014c81e32757ce92d7a5b26483624a2295afd09704ee6b350b49"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 38417382,
        "transactionHash": "0x79a836e96980c77b4597bf6d2369290186cc14e069e4f68f45a58b3fbed9a5ba",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000aa00f46d8fcaf64d370a5da2ee37c90fa5fbbe58",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000008335e5171300000000000000000000000000000000000000000000000000004fea5529db7df28000000000000000000000000000000000000000000002104017e247dacf39a4700000000000000000000000000000000000000000000000004f671f44c46af28000000000000000000000000000000000000000000002104018657dbfe64ca47",
        "logIndex": 22,
        "blockHash": "0x366ca1bdb943014c81e32757ce92d7a5b26483624a2295afd09704ee6b350b49"
      }
    ],
    "blockNumber": 38417382,
    "cumulativeGasUsed": "1334207",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      {
        "action": 0,
        "facetAddress": "0xBD9d2a51B8aF382dAc420f862d4E1B458cC11DF4",
        "functionSelectors": [
          "0x1f931c1c"
        ]
      },
      {
        "action": 0,
        "facetAddress": "0xB200799f48771bFD57ea9b5944fdB71568439007",
        "functionSelectors": [
          "0xcdffacc6",
          "0x52ef6b2c",
          "0xadfca15e",
          "0x7a0ed627",
          "0x01ffc9a7"
        ]
      },
      {
        "action": 0,
        "facetAddress": "0x639b820dC7210cB0e8684F575Ac2AE7f6D12c9c9",
        "functionSelectors": [
          "0x8da5cb5b",
          "0xf2fde38b"
        ]
      }
    ],
    "0xb3194460B5548628E9f58424525E2a823D5c18Ac",
    "0xe1c7392a"
  ],
  "numDeployments": 1,
  "solcInputHash": "75b9100265bb2ec0275a7f0c719770ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCuts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initializationContractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"InitializationFunctionReverted\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Diamond.sol\":\"Diamond\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n*\\r\\n* Implementation of a diamond.\\r\\n/******************************************************************************/\\r\\n\\r\\nimport {LibDiamond} from \\\"./libraries/LibDiamond.sol\\\";\\r\\nimport {IDiamondCut} from \\\"./interfaces/IDiamondCut.sol\\\";\\r\\n\\r\\ncontract Diamond {\\r\\n    constructor(IDiamondCut.FacetCut[] memory _diamondCuts, address _init, bytes memory _calldata) payable {\\r\\n        LibDiamond.setContractOwner(msg.sender);\\r\\n        LibDiamond.diamondCut(_diamondCuts, _init, _calldata);\\r\\n    }\\r\\n\\r\\n    // Find facet for function that is called and execute the\\r\\n    // function if a facet is found and return any value.\\r\\n    fallback() external payable {\\r\\n        LibDiamond.DiamondStorage storage ds;\\r\\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\\r\\n        // get diamond storage\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n        // get facet from function selector\\r\\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\\r\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\r\\n        // Execute external function from facet using delegatecall and return any value.\\r\\n        assembly {\\r\\n            // copy function selector and any arguments\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n            // execute function call using the facet\\r\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\r\\n            // get any return value\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n            // return any return value or error back to the caller\\r\\n            switch result\\r\\n            case 0 {\\r\\n                revert(0, returndatasize())\\r\\n            }\\r\\n            default {\\r\\n                return(0, returndatasize())\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xf7e9a428c732d61ef1e9644df1d6cf8767a656affedf698fe22336a79fb379d0\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity  0.8.19;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\\r\\n\",\"keccak256\":\"0x4e8a74a8dabba0b2d432e66329059ef67e3c6f771dba0a9ad8c4c8fa6cadcc81\",\"license\":\"MIT\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\r\\n\\r\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\r\\n// The loupe functions are required by the EIP2535 Diamonds standard\\r\\n\\r\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\r\\n\\r\\nlibrary LibDiamond {\\r\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\r\\n\\r\\n    struct FacetAddressAndPosition {\\r\\n        address facetAddress;\\r\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\r\\n    }\\r\\n\\r\\n    struct FacetFunctionSelectors {\\r\\n        bytes4[] functionSelectors;\\r\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\r\\n    }\\r\\n\\r\\n    struct DiamondStorage {\\r\\n        // maps function selector to the facet address and\\r\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\r\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\r\\n        // maps facet addresses to function selectors\\r\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\r\\n        // facet addresses\\r\\n        address[] facetAddresses;\\r\\n        // Used to query if a contract implements an interface.\\r\\n        // Used to implement ERC-165.\\r\\n        mapping(bytes4 => bool) supportedInterfaces;\\r\\n        // owner of the contract\\r\\n        address contractOwner;\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    function setContractOwner(address _newOwner) internal {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        address previousOwner = ds.contractOwner;\\r\\n        ds.contractOwner = _newOwner;\\r\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\r\\n    }\\r\\n\\r\\n    function contractOwner() internal view returns (address contractOwner_) {\\r\\n        contractOwner_ = diamondStorage().contractOwner;\\r\\n    }\\r\\n\\r\\n    function enforceIsContractOwner() internal view {\\r\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\r\\n    }\\r\\n\\r\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n\\r\\n    // Internal function version of diamondCut\\r\\n    function diamondCut(IDiamondCut.FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\r\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\r\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\r\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\r\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\r\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\r\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else {\\r\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\r\\n            }\\r\\n        }\\r\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\r\\n        initializeDiamondCut(_init, _calldata);\\r\\n    }\\r\\n\\r\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\r\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\r\\n        // add new facet address if it does not exist\\r\\n        if (selectorPosition == 0) {\\r\\n            addFacet(ds, _facetAddress);\\r\\n        }\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\r\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\r\\n            selectorPosition++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\r\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\r\\n        // add new facet address if it does not exist\\r\\n        if (selectorPosition == 0) {\\r\\n            addFacet(ds, _facetAddress);\\r\\n        }\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\r\\n            removeFunction(ds, oldFacetAddress, selector);\\r\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\r\\n            selectorPosition++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        // if function does not exist then do nothing and return\\r\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            removeFunction(ds, oldFacetAddress, selector);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\r\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\r\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\r\\n        ds.facetAddresses.push(_facetAddress);\\r\\n    }\\r\\n\\r\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\r\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\r\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\r\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\r\\n    }\\r\\n\\r\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\r\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\r\\n        // an immutable function is a function defined directly in a diamond\\r\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\r\\n        // replace selector with last selector, then delete last selector\\r\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\r\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\r\\n        // if not the same then replace _selector with lastSelector\\r\\n        if (selectorPosition != lastSelectorPosition) {\\r\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\r\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\r\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\r\\n        }\\r\\n        // delete the last selector\\r\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\r\\n        delete ds.selectorToFacetAndPosition[_selector];\\r\\n\\r\\n        // if no more selectors for facet address then delete the facet address\\r\\n        if (lastSelectorPosition == 0) {\\r\\n            // replace facet address with last facet address and delete last facet address\\r\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\r\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\r\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\r\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\r\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\r\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\r\\n            }\\r\\n            ds.facetAddresses.pop();\\r\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\r\\n        if (_init == address(0)) {\\r\\n            return;\\r\\n        }\\r\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\r\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\r\\n        if (!success) {\\r\\n            if (error.length > 0) {\\r\\n                // bubble up error\\r\\n                /// @solidity memory-safe-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(error)\\r\\n                    revert(add(32, error), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert InitializationFunctionReverted(_init, _calldata);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\r\\n        uint256 contractSize;\\r\\n        assembly {\\r\\n            contractSize := extcodesize(_contract)\\r\\n        }\\r\\n        require(contractSize > 0, _errorMessage);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa0eeaa07d399a66eab9d0670d42b43712647303fe34f5a6641e5062259e6d0c0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052604051620027f4380380620027f4833981810160405281019062000029919062001a66565b6200003a336200005660201b60201c565b6200004d8383836200013560201b60201c565b5050506200257e565b600062000068620003b960201b60201c565b905060008160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60005b8351811015620003645760008482815181106200015a576200015962001b00565b5b6020026020010151602001519050600060028111156200017f576200017e62001b2f565b5b81600281111562000195576200019462001b2f565b5b03620001f557620001ef858381518110620001b557620001b462001b00565b5b602002602001015160000151868481518110620001d757620001d662001b00565b5b602002602001015160400151620003e660201b60201c565b6200034d565b600160028111156200020c576200020b62001b2f565b5b81600281111562000222576200022162001b2f565b5b0362000282576200027c85838151811062000242576200024162001b00565b5b60200260200101516000015186848151811062000264576200026362001b00565b5b6020026020010151604001516200068860201b60201c565b6200034c565b60028081111562000298576200029762001b2f565b5b816002811115620002ae57620002ad62001b2f565b5b036200030e5762000308858381518110620002ce57620002cd62001b00565b5b602002602001015160000151868481518110620002f057620002ef62001b00565b5b6020026020010151604001516200093c60201b60201c565b6200034b565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003429062001be5565b60405180910390fd5b5b5b5080806200035b9062001c40565b91505062000138565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738383836040516200039a9392919062001f51565b60405180910390a1620003b4828262000ae460201b60201c565b505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b60008151116200042d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004249062002012565b60405180910390fd5b60006200043f620003b960201b60201c565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603620004b3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004aa90620020aa565b60405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff1603620005295762000528828562000c1860201b60201c565b5b60005b8351811015620006815760008482815181106200054e576200054d62001b00565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161462000645576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200063c9062002142565b60405180910390fd5b620006598583868a62000cfc60201b60201c565b838062000666906200217c565b94505050508080620006789062001c40565b9150506200052c565b5050505050565b6000815111620006cf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006c69062002012565b60405180910390fd5b6000620006e1620003b960201b60201c565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160362000755576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200074c90620020aa565b60405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff1603620007cb57620007ca828562000c1860201b60201c565b5b60005b835181101562000935576000848281518110620007f057620007ef62001b00565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620008e6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008dd906200222b565b60405180910390fd5b620008f985828462000ea960201b60201c565b6200090d8583868a62000cfc60201b60201c565b83806200091a906200217c565b945050505080806200092c9062001c40565b915050620007ce565b5050505050565b600081511162000983576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200097a9062002012565b60405180910390fd5b600062000995620003b960201b60201c565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161462000a09576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a0090620022c3565b60405180910390fd5b60005b825181101562000ade57600083828151811062000a2e5762000a2d62001b00565b5b602002602001015190506000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905062000ac684828462000ea960201b60201c565b5050808062000ad59062001c40565b91505062000a0c565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16031562000c145762000b4582604051806060016040528060288152602001620027a8602891396200152a60201b60201c565b6000808373ffffffffffffffffffffffffffffffffffffffff168360405162000b6f919062002327565b600060405180830381855af49150503d806000811462000bac576040519150601f19603f3d011682016040523d82523d6000602084013e62000bb1565b606091505b50915091508162000c115760008151111562000bd05780518082602001fd5b83836040517f192105d700000000000000000000000000000000000000000000000000000000815260040162000c0892919062002340565b60405180910390fd5b50505b5050565b62000c4381604051806060016040528060248152602001620027d0602491396200152a60201b60201c565b81600201805490508260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b81846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508360010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018390806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908360e01c021790555080846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000f1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000f1290620023ea565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000f8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000f839062002482565b60405180910390fd5b6000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050600060018560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180549050620010659190620024a4565b9050808214620012005760008560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018281548110620010ca57620010c962001b00565b5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050808660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001848154811062001149576200114862001b00565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555082866000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505b8460010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805480620012575762001256620024df565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055846000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff02191690555050600081036200152357600060018660020180549050620013449190620024a4565b905060008660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490508181146200148c576000876002018381548110620013b257620013b162001b00565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080886002018381548110620013f957620013f862001b00565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818860010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505b86600201805480620014a357620014a2620024df565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000905550505b5050505050565b6000823b905060008111829062001579576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200157091906200255a565b60405180910390fd5b50505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620015e38262001598565b810181811067ffffffffffffffff82111715620016055762001604620015a9565b5b80604052505050565b60006200161a6200157f565b9050620016288282620015d8565b919050565b600067ffffffffffffffff8211156200164b576200164a620015a9565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062001698826200166b565b9050919050565b620016aa816200168b565b8114620016b657600080fd5b50565b600081519050620016ca816200169f565b92915050565b60038110620016de57600080fd5b50565b600081519050620016f281620016d0565b92915050565b600067ffffffffffffffff821115620017165762001715620015a9565b5b602082029050602081019050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6200175e8162001727565b81146200176a57600080fd5b50565b6000815190506200177e8162001753565b92915050565b60006200179b6200179584620016f8565b6200160e565b90508083825260208201905060208402830185811115620017c157620017c06200165c565b5b835b81811015620017ee5780620017d988826200176d565b845260208401935050602081019050620017c3565b5050509392505050565b600082601f83011262001810576200180f62001593565b5b81516200182284826020860162001784565b91505092915050565b60006060828403121562001844576200184362001661565b5b6200185060606200160e565b905060006200186284828501620016b9565b60008301525060206200187884828501620016e1565b602083015250604082015167ffffffffffffffff8111156200189f576200189e62001666565b5b620018ad84828501620017f8565b60408301525092915050565b6000620018d0620018ca846200162d565b6200160e565b90508083825260208201905060208402830185811115620018f657620018f56200165c565b5b835b818110156200194457805167ffffffffffffffff8111156200191f576200191e62001593565b5b8086016200192e89826200182b565b85526020850194505050602081019050620018f8565b5050509392505050565b600082601f83011262001966576200196562001593565b5b815162001978848260208601620018b9565b91505092915050565b600080fd5b600067ffffffffffffffff821115620019a457620019a3620015a9565b5b620019af8262001598565b9050602081019050919050565b60005b83811015620019dc578082015181840152602081019050620019bf565b60008484015250505050565b6000620019ff620019f98462001986565b6200160e565b90508281526020810184848401111562001a1e5762001a1d62001981565b5b62001a2b848285620019bc565b509392505050565b600082601f83011262001a4b5762001a4a62001593565b5b815162001a5d848260208601620019e8565b91505092915050565b60008060006060848603121562001a825762001a8162001589565b5b600084015167ffffffffffffffff81111562001aa35762001aa26200158e565b5b62001ab1868287016200194e565b935050602062001ac486828701620016b9565b925050604084015167ffffffffffffffff81111562001ae85762001ae76200158e565b5b62001af68682870162001a33565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082825260208201905092915050565b7f4c69624469616d6f6e644375743a20496e636f7272656374204661636574437560008201527f74416374696f6e00000000000000000000000000000000000000000000000000602082015250565b600062001bcd60278362001b5e565b915062001bda8262001b6f565b604082019050919050565b6000602082019050818103600083015262001c008162001bbe565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b600062001c4d8262001c36565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362001c825762001c8162001c07565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62001cc4816200168b565b82525050565b6003811062001cde5762001cdd62001b2f565b5b50565b600081905062001cf18262001cca565b919050565b600062001d038262001ce1565b9050919050565b62001d158162001cf6565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62001d528162001727565b82525050565b600062001d66838362001d47565b60208301905092915050565b6000602082019050919050565b600062001d8c8262001d1b565b62001d98818562001d26565b935062001da58362001d37565b8060005b8381101562001ddc57815162001dc0888262001d58565b975062001dcd8362001d72565b92505060018101905062001da9565b5085935050505092915050565b600060608301600083015162001e03600086018262001cb9565b50602083015162001e18602086018262001d0a565b506040830151848203604086015262001e32828262001d7f565b9150508091505092915050565b600062001e4d838362001de9565b905092915050565b6000602082019050919050565b600062001e6f8262001c8d565b62001e7b818562001c98565b93508360208202850162001e8f8562001ca9565b8060005b8581101562001ed1578484038952815162001eaf858262001e3f565b945062001ebc8362001e55565b925060208a0199505060018101905062001e93565b50829750879550505050505092915050565b62001eee816200168b565b82525050565b600081519050919050565b600082825260208201905092915050565b600062001f1d8262001ef4565b62001f29818562001eff565b935062001f3b818560208601620019bc565b62001f468162001598565b840191505092915050565b6000606082019050818103600083015262001f6d818662001e62565b905062001f7e602083018562001ee3565b818103604083015262001f92818462001f10565b9050949350505050565b7f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660008201527f6163657420746f20637574000000000000000000000000000000000000000000602082015250565b600062001ffa602b8362001b5e565b9150620020078262001f9c565b604082019050919050565b600060208201905081810360008301526200202d8162001feb565b9050919050565b7f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260008201527f6520616464726573732830290000000000000000000000000000000000000000602082015250565b600062002092602c8362001b5e565b91506200209f8262002034565b604082019050919050565b60006020820190508181036000830152620020c58162002083565b9050919050565b7f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f60008201527f6e207468617420616c7265616479206578697374730000000000000000000000602082015250565b60006200212a60358362001b5e565b91506200213782620020cc565b604082019050919050565b600060208201905081810360008301526200215d816200211b565b9050919050565b60006bffffffffffffffffffffffff82169050919050565b6000620021898262002164565b91506bffffffffffffffffffffffff8203620021aa57620021a962001c07565b5b600182019050919050565b7f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60008201527f6374696f6e20776974682073616d652066756e6374696f6e0000000000000000602082015250565b60006200221360388362001b5e565b91506200222082620021b5565b604082019050919050565b60006020820190508181036000830152620022468162002204565b9050919050565b7f4c69624469616d6f6e644375743a2052656d6f7665206661636574206164647260008201527f657373206d757374206265206164647265737328302900000000000000000000602082015250565b6000620022ab60368362001b5e565b9150620022b8826200224d565b604082019050919050565b60006020820190508181036000830152620022de816200229c565b9050919050565b600081905092915050565b6000620022fd8262001ef4565b620023098185620022e5565b93506200231b818560208601620019bc565b80840191505092915050565b6000620023358284620022f0565b915081905092915050565b600060408201905062002357600083018562001ee3565b81810360208301526200236b818462001f10565b90509392505050565b7f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360008201527f74696f6e207468617420646f65736e2774206578697374000000000000000000602082015250565b6000620023d260378362001b5e565b9150620023df8262002374565b604082019050919050565b600060208201905081810360008301526200240581620023c3565b9050919050565b7f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560008201527f7461626c652066756e6374696f6e000000000000000000000000000000000000602082015250565b60006200246a602e8362001b5e565b915062002477826200240c565b604082019050919050565b600060208201905081810360008301526200249d816200245b565b9050919050565b6000620024b18262001c36565b9150620024be8362001c36565b9250828203905081811115620024d957620024d862001c07565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600081519050919050565b600062002526826200250e565b62002532818562001b5e565b935062002544818560208601620019bc565b6200254f8162001598565b840191505092915050565b6000602082019050818103600083015262002576818462002519565b905092915050565b61021a806200258e6000396000f3fe60806040523661000b57005b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9050809150600082600001600080357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610141576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610138906101c4565b60405180910390fd5b3660008037600080366000845af43d6000803e8060008114610162573d6000f35b3d6000fd5b600082825260208201905092915050565b7f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f74206578697374600082015250565b60006101ae602083610167565b91506101b982610178565b602082019050919050565b600060208201905081810360008301526101dd816101a1565b905091905056fea264697066735822122093cb4b28fd5db7ee4d807faaef0e5d591fcf5b32233c91145704a492c7569ee164736f6c634300081300334c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465",
  "deployedBytecode": "0x60806040523661000b57005b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9050809150600082600001600080357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610141576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610138906101c4565b60405180910390fd5b3660008037600080366000845af43d6000803e8060008114610162573d6000f35b3d6000fd5b600082825260208201905092915050565b7f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f74206578697374600082015250565b60006101ae602083610167565b91506101b982610178565b602082019050919050565b600060208201905081810360008301526101dd816101a1565b905091905056fea264697066735822122093cb4b28fd5db7ee4d807faaef0e5d591fcf5b32233c91145704a492c7569ee164736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}